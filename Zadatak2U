using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Z2
{
    public static class StudentskaSluzba
    {
        public static Dictionary<Smer, List<Predmet>> smeroviSaPredmetima;
        public static List<Student> potencijalniStudenti;
        public static Dictionary<Smer, List<UpisaniStudent>> upisaniStudenti;
        public static Dictionary<Smer, List<Asistent>> asistenti;

        static StudentskaSluzba()
        {
            Smer s1 = new Smer("Smer-1");
            Smer s2 = new Smer("Smer-2");
            Smer s3 = new Smer("Smer-3");

            smeroviSaPredmetima = new Dictionary<Smer, List<Predmet>>
            {
                { s1, new List<Predmet> {new Predmet("S1P1"), new Predmet("S1P2"), new Predmet("S1P3")} },
                { s2, new List<Predmet> {new Predmet("S2P1"), new Predmet("S2P2"), new Predmet("S2P3")} },
            };

            potencijalniStudenti = new List<Student>
            {
                new Student("Ime1", "Prezime1", s1, 40),
                new Student("Ime2", "Prezime2", s1, 60),
                new Student("Ime3", "Prezime3", s1, 80),
                new Student("Ime4", "Prezime4", s1, 100),
                new Student("Ime5", "Prezime5", s1, 45),
                new Student("Ime6", "Prezime6", s2, 55),
                new Student("Ime7", "Prezime7", s2, 62),
                new Student("Ime8", "Prezime8", s2, 60),
                new Student("Ime9", "Prezime9", s2, 72),
                new Student("Ime10", "Prezime10", s2, 20),
            };

            asistenti = new Dictionary<Smer, List<Asistent>>
            {
                {s1, new List<Asistent> { new Asistent("AIme1", "APrezime1"), new Asistent("AIme2", "APrezime2") } },
                {s2, new List<Asistent> { new Asistent("AIme3", "APrezime3") } },
            };

            upisaniStudenti = new Dictionary<Smer, List<UpisaniStudent>>();
        }

        public static void UpisiStudenteNaSmerove()
        {
            // po svakom smeru prva trojica
            var studenti_po_smeru =
                from student in potencijalniStudenti
                orderby student.BrojBodovaSaPrijemnog descending
                where student.BrojBodovaSaPrijemnog > 51
                group student by student.Smer into g
                select new { Smer = g.Key, Students = g.Take(3).ToList() };

            foreach (var spisak in studenti_po_smeru) {
                upisaniStudenti[spisak.Smer] = new List<UpisaniStudent>();
                foreach (Student s in spisak.Students) {
                    upisaniStudenti[spisak.Smer].Add(new UpisaniStudent(s));
                }
            }
        }

        public static void UpisiOcenu(Smer smer, int brojIndeksa, Predmet predmet, int ocena)
        {
            foreach (UpisaniStudent upisaniStudent in upisaniStudenti[smer])
                if (upisaniStudent.BrojIndeksa.Equals(brojIndeksa))
                    upisaniStudent.Ocene[predmet] = ocena;
        }

        // IZVESTAJI

        public static void NajboljiStudent()
        {
            Console.WriteLine("NAJBOLJI STUDENT JE:");

            // SelectMany(x => x) sluzi da bi lista listi bila pretvorena u listu
            // u ovom slucaju se List<List<UpisaniStudent>> pretvara u List<UpisaniStudent>

           // UpisaniStudent student = upisaniStudenti.Values.SelectMany(x => x).Aggregate((s1, s2) => s1.Prosek > s2.Prosek ? s1 : s2);

            /*
            
            // prvo Urosevo resenje za pronalazenje najboljeg studenta
            
            // prosek najboljeg studenta
            var prosek = upisaniStudenti.Values.SelectMany(x => x).Max(stud => stud.Prosek);
            
            // prvi student koji se po proseku poklapa sa prosekom najboljeg studenta
            var najstud = upisaniStudenti.Values.SelectMany(x => x).First(stud => stud.Prosek == prosek);

            Console.WriteLine("Najstud: " + najstud.Ime " " + najstud.Prezime + " Prosek: " + prosek);
            */
           
             // drugo Urosevo resenje za pronalazenje najboljeg studenta

            // List<List<UpisaniStudent>>
            var listaListi = upisaniStudenti.Values;

            UpisaniStudent studentic = new UpisaniStudent("A", "B");
            
            foreach (List<UpisaniStudent> studenti in listaListi)
            {
                foreach (UpisaniStudent us in studenti)
                {
                    if (us.Prosek > studentic.Prosek)
                    {
                        studentic = us;
                    }
                }  
            }
            Console.WriteLine("Studentic: " + studentic.Ime + " " + studentic.Prezime + " Prosek: " + Math.Round(studentic.Prosek, 2));
           
           // Console.WriteLine($"Student: {student.Ime} {student.Prezime} sa prosekom: {student.Prosek:N2} ");
            
        }

        public static void NajboljiStudentiPoSmerovima()
        {
            Console.WriteLine("NAJBOLJI STUDENTI PO SMEROVIMA SU:");

            var results =
                from upisaniStudent in upisaniStudenti.Values.SelectMany(x => x)
                group upisaniStudent by upisaniStudent.Smer into g_po_smeru
                select new
                {
                    Smer = g_po_smeru.Key,
                    Student = g_po_smeru.First(x => x.Prosek == g_po_smeru.Max(student => student.Prosek))
                };

            foreach (var result in results)
            {
                Console.WriteLine($"SMER: {result.Smer.Naziv}, STUDENT: {result.Student.Ime} {result.Student.Prezime} sa prosekom: {result.Student.Prosek:N2} ");
            }
        }

        public static void PolozeniPredmetiPoStudentima()
        {
            
          /*  var results =
                from s in upisaniStudenti.Values.SelectMany(x => x)
                group s by s into g_po_studentu
                select new
                {
                    Student = g_po_studentu.Key,
                    Polozeno = g_po_studentu.Key.Ocene.Where(x => x.Value > 5)
                };
            
           */
            
            // Urosevo resenje - Jankelino grupisanje nista ne menja
            var results =
                from s in upisaniStudenti.Values.SelectMany(x => x)
                
                select new
                {
                    Student = s,
                    Polozeno = s.Ocene.Where(x => x.Value > 5)
                };
           
          
           /* foreach (var par_student_polozeno in results)
            {
                Console.WriteLine($"STUDENT: {par_student_polozeno.Student.Ime} {par_student_polozeno.Student.Prezime} je polozio:");
                foreach (var par_predmet_ocena in par_student_polozeno.Polozeno)
                {
                    Console.WriteLine($"PREDMET:  {par_predmet_ocena.Key.Naziv} sa ocenom: {par_predmet_ocena.Value}");
                }
            }*/

        }

        public static void StudentiSaOcenamaIznad8()
        {
            Console.WriteLine("STUDENTI SA SVIM OCENAMA IZNAD 8 SU:");

            var studenti =
                from s in upisaniStudenti.Values.SelectMany(x => x)
                where s.Ocene.Values.Min() >= 8
                select s;
            
            foreach (Student s in studenti)
            {
                Console.WriteLine($"Student: {s.Ime} {s.Prezime}");
            }
        }
    }
}
